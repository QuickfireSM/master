Combination Explanations:


There are 4 formulas: Skip, Buff, Nerf, Set

	Skip:
	Skip just ignores the value keeping it the same as without any combination
	
	Buff/Nerf:
	Buff and nerf are based on an <input> value. This input value comes from the original block collection.
	
	Set
	Set doesn't take an input value and set the value as is.
	

Linear:
	The linear modifier multiplies the total size of the original+combination+effect collection to the value
	
	
---------------------------------
Code:
getMasterSize(): the amount of blocks in the original groups
getCombisize(): the amount of blocks in the connected groups
getEffectsize(): the amount of blocks in the tertiary groups
getMaxBonus(): value of the blockBehaviorConfig 



SetFormula
	@Override
	public float getOuput(float input) {
		if (isLinear()) {
			int total = getMasterSize() + getCombisize() + getEffectsize();
			return (float)total*getMaxBonus();
		}
		return getMaxBonus();
	}

BuffFormula
	@Override
	public float getOuput(float input) {
		float ratio = getRatio();
		float maxBonus = getMaxBonus();
		float output;

		float total = 1;
		if (isLinear()) {
			total = getMasterSize() + getCombisize() + getEffectsize();
		}
		// the actual buff

		if (isInverse()) {
			float p = 1f - 1f / maxBonus;
			float m = ratio;
			float g = m * p;

			float modInput = input - g * input;

			output = modInput * total;

		} else {
			float pAff = maxBonus * ratio;
			output = total * input + (pAff * (total * input));

		}
		return output;

	}
	
NerfFormula
	@Override
	public float getOuput(float input) {
		float ratio = getRatio();

		float maxBonus = getMaxBonus();

		float actualBonus;
		float output;

		float total = 1;
		if (isLinear()) {
			total = getMasterSize() + getCombisize() + getEffectsize();
		}

		// the actual nerf

		if (isInverse()) {
			float pAff = maxBonus * ratio;
			output = total * input + (pAff * (total * input));
		} else {
			float p = 1f - 1f / maxBonus;
			float m = ratio;
			float g = m * p;

			float modInput = input - g * input;

			output = modInput * total;
		}
		return output;
	}



Keep in mind that speed is always based on the relative universe speed set in the ServerConfig.cfg
 